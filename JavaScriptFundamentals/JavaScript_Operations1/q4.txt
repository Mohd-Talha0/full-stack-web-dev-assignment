Q4: Discuss the precedence and associativity of operators in JavaScript. Why is understanding these concepts important?
Answer: 

Operator Precedence and Associativity in JavaScript

- Operator Precedence
Operator precedence determines the order in which operators are evaluated in expressions. Operators with higher precedence are evaluated before operators with lower precedence.

- Operator Associativity
Operator associativity determines the order in which operators of the same precedence are evaluated. Operators can have either left-to-right or right-to-left associativity.

--> Why Understanding Precedence and Associativity is Important

Understanding these concepts is crucial because they directly affect how expressions are evaluated. Misunderstanding them can lead to unexpected results and bugs in your code.

- Operator Associativity Example
Consider the following expression:

let a = 10;
let b = 20;
let c = 30;

a = b = c;

Due to right-to-left associativity of the assignment (=) operator, the expression is evaluated as:

b = c; // b is 30
a = b; // a is also 30
// Now a, b, and c are all 30




